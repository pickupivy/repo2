
用存储换速度！

对于没有中断的开发来说：
当某个功能可能随时会开启或关闭，不会一直开启，就需要加flag以供实时判断，这个flag的加入会增加程序的运算负担，而且是不可避免的，唯一能做的就是控制判断的频率。
若这个功能需要用到一些变量，这些变量涉及到初始化的问题。那么能在功能开启时再去初始化这些变量吗？
答案是不应该这么做。这么做的收益是减少了变量的存储空间占用，但付出的代价却是，在功能开启时，你需要一直去判断这些变量是否已经初始化完成，这个判断的引入就会导致运算负担的增加，因为判断是实时的。

Boolean操作符的特性（直接copy文档而来）：
x or y: if x is false, then y, else x
x and y: if x is false, then x, else y
not x: if x is false, then True, else False
1.注意and和or操作符的短路特性
2.not运算符要么返回True要么返回False
3.and和or运算符的返回值不限于True和False，它只是对x或者y做真值测试，然后返回其中一个的值（注意不是其真值）

round()如果只有一个数作为参数，不指定位数的时候，返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。
但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数，这就是为什么round(2.5) = 2。
当指定取舍的小数点位数的时候，一般情况也是使用四舍五入的规则，
但是碰到.5的这样情况，如果要取舍的位数前的小树是奇数，则直接舍弃，如果偶数这向上取舍。
>>> round(2.5)
2
>>> round(1.5)
2
>>> round(2.675)
3
>>> round(2.635, 2)
2.63
>>> round(2.645, 2)
2.65

