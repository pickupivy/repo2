for 语句的基本用法 ：
 
    最复杂的for 语句，也有其基本形态，它的模样是这样的： 
 
   在cmd 窗口中：for %I in (command1) do command2 
   在批处理文件中：for %%I in (command1) do command2 
 
   之所以要区分 cmd 窗口和批处理文件两种环境，是因为在这两种环境下，命令语句表现出来的行为虽然基本一样，但是在细节上还是稍有不同，最明显的一个差异就是：在cmd 窗口中，for 之后的形式变量I 必须使用单百分号引用，即%I；而在批处理文件中，引用形式变量I 必须使用双百分号，即%%I。为了方便起见，若不是特别强调，以下的讲解都以批处理文件环境为例。 
 
   我们先来看一下for 语句的基本要素都有些什么： 
 
   1、for、in 和do 是  for 语句的关键字，它们三个缺一不可； 
   2、%%I 是for 语句中对形式变量的引用，就算它在do 后的语句中没有参与语句的执行，也是必须出现的； 
   3、in 之后，do 之前的括号不能省略； 
   4、command1 表示字符串或变量，command2 表示字符串、变量或命令语句； 
   5、for /d  注意：for 后 可以 加 /f /r /l /d 这四个 参数，现在 先 介绍 /d 参数的 作用，一句话 /d 用于 搜索 目录 或 文件夹，但 不会搜索文件，也不搜索 子目录；
   现在，你可能已经会写一个简单的for 语句了，比如： 
在 一个 cmd.bat 文件里 写，写 如下 两条 命令：
for /d %%i in (*) do echo %%i
pause 



[code1] 
@echo off 
for %%I in (bbs.bathome.cn) do echo %%I 
pause 
 
   保存为批处理文件并执行，将会在弹出的批处理窗口中看到这样的信息： 
 
[result1] 
bbs.bathome.cn 
请按任意键继续... 
 
  先来分析一下 for 语句的一些注意事项，之后，再让大家看看更为强大的for 语句实例。 
 
   1、for 语句的形式变量 I，可以换成 26 个字母中的任意一个，这些字母会区分大小写，也就是说，%%I 和%%i 会被认为不是同一个变量；形式变量 I还可以换成其他的字符，但是，为了不与批处理中的%0～%9 这10 个形式变量发生冲突，请不要随意把%%I 替换为%%0  ～%%9 中的任意一个；

   2、in 和do 之间的command1 表示的字符串或变量可以是一个，也可以是多个，每一个字符串或变量，我们称之为一个元素，每个元素之间，用空格键、跳格键、逗号、分号或等号分隔；

   3、for 语句依次提取 command1 中的每一个元素，把它的值赋予形式变量I,带到do 后的command2 中参与命令的执行；并且每次只提取一个元素，然后执行一次 do 后的命令语句，而无论这个元素是否被带到 command2 中参与了command2 的运行；当执行完一次do 后的语句之后，再提取command1 中的下一个元素，再执行一次 command2，如此循环，直到 command1 中的所有元素都已经被提取完毕，该for 语句才宣告执行结束； 
 
   其中，第3 点是最为关键的，它描述了for 语句的执行过程，是for 语句的精髓所在，大家一定要牢记这一条，才能深刻理解更为复杂的for 流程。 
 
   有了以上的基础，我们再来看一个例子，这个例子修改了code1 的部分内容，
结果将大不一样： 
 
[code2] 
@echo off 
for %%I in (bbs,bathome,cn) do echo %%I 
pause 
 
   和code1 的执行结果相比，code2 的执行结果发生了如下变化： 
   1、显示结果分成了3 行（不算最后一行中文提示）； 
   2、每一行都从逗号处被切分； 
 
   如果把  bbs.bathome.cn  这个字符串中的点号换为 空格、跳格 或 等号，执行结果将和code2 的执行结果别无二致。 
 
以下这段代码的 功能是 ：检测当前硬盘都有哪些分区
 
[code3] 
@echo off 
set str=c d e f g h i j k l m n o p q r s t u v w x y z 
echo  当前硬盘的分区有： 
for %%i in (%str%) do if exist %%i: echo %%i: 
pause 
 
   这段代码能检测硬盘都有哪些分区，包括 U 盘和移动硬盘的分区，但是，
当光驱中有盘的时候，也会被列出来，这是本代码的一个缺憾，在以后的讲解中，
我将向大家讲述如何消除这个瑕疵，敬请关注本系列的后续章节。 
 
   想知道当前目录下都有哪些文件，请用下面的代码： 
 
@echo off 
for %%i in (*.*) do echo "%%i" 
pause 
 第二句 可以 用 for %%i in (*) do echo "%%i"  代替；

   想列出当前目录下所有的文本文件吗？请用下面的代码： 
 
@echo off 
for %%i in (*.txt) do echo "%%i" 
pause 
 
   想列出只用两个字符作为文件名的文本文件吗？请用下面的代码： 
 
@echo off 
for %%i in (??.txt) do echo "%%i" 
pause 
 ===============================
   题外话： 
 
   1、列出当前目录下各种文件的方法，最简单的还是用dir 命令，但是，从以上代码中，各位可以加深对for 语句执行流程的理解（用到了通配符*和?）； 
   2、注意：以上代码不能列出含有隐藏或系统属性的文件；

三、文本解析显神威：for /f  用法详解 
 
    前言 
 
   for /f  是个十分强大的家伙。 
 
   如果说，for 语句是批处理中最强大的语句的话，那么，for /f  就是精华中的精华。 
 
   for  /f  的强大，和它拥有众多的开关密切相关。因为开关众多，所以用法复杂，本章将分成若干小节，为大家逐一介绍强大的  for /f  语句。 
 
    （一）  为解析文本而生：f or /f  的基本用法 
 
   所有的对象，无论是文件、窗体、还是控件，在所有的非机器语言看来，无外乎都是形如"c:\test.txt"、"CWnd"之类的文本信息；而所有的对象，具体的如ini
文件中的某条配置信息、注册表中的某个键值、数据库中的某条记录??都只有转化为具有一定格式的文本信息，方可被代码识别、操控。可以说，编程的很大
一部分工作，都是在绞尽脑汁想方设法如何提取这些文本信息。 
 
   而提取文本信息，则是for /f 的拿手好戏：读取文件内容；提取某几行字符；截取某个字符片段；对提取到的内容再切分、打乱、杂糅??只要你所能想到的花样，for /f  都会想方设法帮你办到，因为，for /f  就是被设计成专门用于解析文本的。 
 
   先来看个例子。 
 
   假如有个文本文件test.txt，内容如下： 
 
[txt1] 
论坛的目标是：不求最大，但求最好，做最实用的批处理论坛。 
论坛地址：bbs.bathome.cn。 
这里是：新手晋级的福地，高手论剑的天堂。 
 
 
   那么，将如下代码保存为test.cmd，并放在test.txt 同一目录下运行，将会在屏幕上原样显示test.txt 的内容： 
 
[code4] 
@echo off 
for /f %%i in (test.txt) do echo %%i 
pause 
 
   这段代码，主要是让你树立这样一种观念：读取文本文件的内容，请使用  for /f  语句！ 
 
   进阶话题：for /f  语句是把整个test.txt 一次性显示出来的？ 
 
   在这段代码中，虽然执行结果是把 test.txt 中的所有内容都显示出来了，貌似  for /f  语句是把整个test.txt 一次性显示到屏幕上，实际上并非如此。 
 
   无论for 语句做何种变化，它的执行过程仍然遵循基本的for 流程：依次处理每个元素，直到所有的元素都被处理为止。只不过在for /f 语句中，这里的元素是指文件中的每一行，也就是说，for /f  语句是以行为单位处理文本文件的。这是一条极为重要的规则，在上一章中也强调过它的重要性，希望在接下来的学习过程中，你能时刻牢记这一原则，那么，很多问题将会迎刃而解。以下是验证这一说法的演示代码（在[code4]的基础上添加了&pause 语句）： 
 
[code5] 
@echo off 
for /f %%i in (test.txt) do echo %%i&pause 
pause 

